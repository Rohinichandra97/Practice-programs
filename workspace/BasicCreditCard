import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.*;

public class BasicCreditCardProcessing {
    public static void main(String[] args) {
        CreditCardProcessing creditCardProcessing = new CreditCardProcessing();
        // Check if input is a File or Customer details if nothing then run unit tests
        if (args.length == 1 && args[0].length() > 4) {
            if (args[0].substring(args[0].length() - 4).equals(".txt")) {
                creditCardProcessing.processFile(args[0]);
            }
        } else if (args.length == 3 || args.length == 4) {
            creditCardProcessing.processTransaction(args);
        } else {
            System.out.println("No user input source detected !! Performing Unit Tests ::");
            creditCardProcessing.performUnitTests();
        }
        creditCardProcessing.printSummaryOfAllTransactions();
    }
}
// Created this object, Otherwise need to make everything static. So segregated in to driver and function class
class CreditCardProcessing{
    Map<String, Customer> accounts = new HashMap<>();
    // Iterate the transactions in file and process them
    public void processFile(String location) {
        File file = new File(location);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader(file));
            String line;
            while ((line = br.readLine()) != null) {
                processTransaction(line.split(" "));
            }
        } catch (Exception e) {
            System.out.println("Invalid file location :" + location);
        }
    }

    /***
     * Process each transaction based on Type.
     * @param args
     */
    public void processTransaction(String[] args) {
        switch (args[0]) {
            case "Add": {
                if (ValidCreditCardNumber(args[2])) {
                    Customer customer = new Customer(args[1], Long.parseLong(args[2]),
                            Long.parseLong(args[3].substring(1)));
                    accounts.put(customer.getName(), customer);
                } else {
                    accounts.put(args[1], null);
                }
                break;
            }
            case "Charge": {
                Customer customer = accounts.get(args[1]);
                if (customer != null) {
                    long requestAmount = Long.parseLong(args[2].substring(1));
                    if (customer.getLimit() - (customer.getBalance() + requestAmount) < 0) {
                        /*System.out.println("Transaction Declined !! :" + "limit :" + customer.getLimit()
                                + "request :" + requestAmount + "balance :" + customer.getBalance());*/
                    } else {
                        customer.setBalance(customer.getBalance() + requestAmount);
                    }
                } else {
                    accounts.put(args[1], null);
                    //System.out.println("Cannot charge, Could not find customer :" + args[1]);
                }
                break;
            }
            case "Credit": {
                Customer customer = accounts.get(args[1]);
                if (customer != null) {
                    long addedCredit = Long.parseLong(args[2].substring(1));
                    customer.setBalance(customer.getBalance() - addedCredit);
                } else {
                    accounts.put(args[1], null);
                    //System.out.println("Cannot Credit amount, Could not find customer :" + args[1]);
                }
                break;
            }
            default: {
                System.out.println("Invalid transaction type requested.");
            }
        }
    }

    /***
     * Validation is from 3rd party, Since I can Use already tested solution.
     * @param creditCardNumber
     * @return
     */
    private boolean ValidCreditCardNumber(String creditCardNumber) {
        try {
            int[] ints = new int[creditCardNumber.length()];
            for (int i = 0; i < creditCardNumber.length(); i++) {
                ints[i] = Integer.parseInt(creditCardNumber.substring(i, i + 1));
            }
            for (int i = ints.length - 2; i >= 0; i = i - 2) {
                int j = ints[i];
                j = j * 2;
                if (j > 9) {
                    j = j % 10 + 1;
                }
                ints[i] = j;
            }
            int sum = 0;
            for (int i = 0; i < ints.length; i++) {
                sum += ints[i];
            }
            if (sum % 10 == 0) {
                return true;
            }
            return false;
        } catch (Exception e) {
            System.out.println("Invalid credit card number : " + creditCardNumber);
            return false;
        }
    }

   /***
    * For printing in sorted order, I could have choose TreeMap, so inserted records are sorted.
    * Since hashMap is O(1) for search,  I used HashMap. Since this sorting is only needed for printing
    * I have used additional memory O(n) for sorting on Thread Stack.
    */
    public void printSummaryOfAllTransactions() {
        Object[] keys = accounts.keySet().toArray();
        Arrays.sort(keys);
        System.out.println("-------------------- Summary ----------------------");
        for(Object key : keys){
            Customer customer = accounts.get(key);
            if(customer != null){
                System.out.println( key + " :$" + customer.getBalance());
            }else{
                System.out.println( key + " :error");
            }
        }
    }


    /***
     * Unit test cases added, for TDD development, run with -ea option to perform assertion.
     */
    public void performUnitTests() {
        String trans[] = new String[]{"Add Tom 4111111111111111 $1000", "Add Lisa 5454545454545454 $1000",
                "Add Quincy 1234567890123456 $2000","Add Jim 545454 $3000","Charge Tom $500",
                "Charge Tom $800","Charge Lisa $7", "Credit Lisa $100", "Credit Chinto $200",
                "Credit Quincy $200"};
        for(String tran : trans){
            processTransaction(tran.split(" "));
        }
        assert(this.accounts.get("Tom").getBalance() == 500);
        assert(this.accounts.get("Tom").getLimit() == 1000);
        assert(this.accounts.get("Lisa").getBalance() == -93);
        assert(this.accounts.get("Quincy") == null);
        assert(this.accounts.get("Chinto") == null);
    }
}
// Defining limit as long, as stated in the requirement that limit is always integer, not decimal.
// Could define limit as int which is 4 bytes but for longer numbers used long 8 bytes
class Customer {

    private String name;
    private long cardNumber;
    private long limit;
    private long balance;

    Customer(String name, long cardNumber, long limit) {
        this.name = name;
        this.limit = limit;
        this.cardNumber = cardNumber;
    }

    public String getName() {
        return name;
    }

    public long getCardNumber() {
        return cardNumber;
    }

    public long getLimit() {
        return limit;
    }

    public long getBalance() {
        return balance;
    }

    public void setBalance(long balance) {
        this.balance = balance;
    }
}
